---
substitutions:
  device: d1_mini_6
  name: D1 Mini 6
  reboot_timeout: 7d
  update_interval: 60s

esphome:
  name: ${device}
  platform: ESP8266
  board: d1_mini
  # includes:
  #   - custom_sensor_bro.h
  # libraries:
  #   - IRRemoteESP8266

<<: !include common/common.yaml

time:
  - platform: homeassistant
    id: datetime

sensor:
  - platform: ultrasonic
    trigger_pin: D1
    echo_pin: D2
    update_interval: 10s
    name: "Ultrasonic Sensor"

# status_led:
#   pin:
#     number: D8
#     # inverted: True

# font:
#   - file: "OpenSans-Regular.ttf"
#     id: font1
#     size: 24
#   - file: "OpenSans-Regular.ttf"
#     id: font2
#     size: 18

# spi:
#   clk_pin: D5
#   mosi_pin: D7
#   # miso_pin: D6

# display:
#   - platform: st7735
#     model: INITR_144GREENTAB
#     cs_pin: D1
#     dc_pin: D3
#     reset_pin: D2
#     colstart: 128
#     rowstart: 128
#     devicewidth: 0
#     deviceheight: 0
#     eightbitcolor: true
#     update_interval: 5s
#     lambda: |-
#       it.print(0, 0, id(font1), "Hello World!");
# i2c:

# display:
#   - platform: ssd1306_i2c
#     model: "SSD1306 128x32"
#     reset_pin: D0
#     address: 0x3C
#     lambda: |-
#       if (id(my_countdown2).state.length() != 0) {
#         it.printf(0, 0, id(font1), TextAlign::TOP_LEFT, "%s", id(my_countdown2).state.c_str());
#         it.strftime(127, 0, id(font2), TextAlign::TOP_RIGHT, "%H:%M", id(datetime).now());
#       } else {
#         it.strftime(0, 0, id(font1), TextAlign::TOP_LEFT, "%H:%M", id(datetime).now());
#         if (id(inside_temperature).has_state()) {
#           it.printf(127, 0, id(font2), TextAlign::TOP_RIGHT, "%.1fÂ°", id(inside_temperature).state);
#         }
#       }
