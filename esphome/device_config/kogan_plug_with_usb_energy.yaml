---
# https://esphome-configs.io/devices/kogan-smarterhome-smart-plug-energy-meter-5v-24a-usb-ports/
binary_sensor:
  - platform: gpio
    pin:
      number: 03
      mode: INPUT_PULLUP
      inverted: true
    name: "$name Power Button"
    internal: true
    on_press:
      - switch.toggle: relay

  - platform: status
    name: "$name Status"

switch:
  - platform: gpio
    id: led
    pin:
      number: GPIO13
      inverted: true
    restore_mode: RESTORE_DEFAULT_ON

  - platform: gpio
    name: "$name"
    pin: GPIO14
    id: relay
    icon: mdi:power-socket-au
    restore_mode: RESTORE_DEFAULT_ON
    on_turn_on:
      - switch.turn_on: led
    on_turn_off:
      - switch.turn_off: led
    
sensor:
  - !include ../common/sensor/wifi-signal.yaml
  - !include ../common/sensor/uptime.yaml  
  - platform: hlw8012
    sel_pin:
      number: GPIO12
      inverted: true
    cf_pin: GPIO04
    cf1_pin: GPIO05
    current:
      name: "$name Current"
      unit_of_measurement: A
    voltage:
      name: "$name Voltage"
      unit_of_measurement: V
    power:
      id: kogan_plug_1_wattage
      name: "$name Power"
      unit_of_measurement: W
    current_resistor: "0.00225" # "0.00087"   ### HIGHER VALUE GIVES LOWER WATTAGE
    voltage_divider: "805"   ### LOWER VALUE GIVES LOWER VOLTAGE
    change_mode_every: "8" #8
    update_interval: 5s

  - platform: total_daily_energy
    name: "$name Daily Energy"
    power_id: kogan_plug_1_wattage
    filters:
      - multiply: 0.001
    unit_of_measurement: kWh

time:
  - platform: homeassistant
    id: homeassistant_time

# text_sensor:
#   - platform: template
#     name: "${name}_upformat"
#     lambda: |-
#       uint32_t dur = id(uptime_sensor).state;
#       int dys = 0;
#       int hrs = 0;
#       int mnts = 0;
#       if (dur > 86399) {
#         dys = trunc(dur / 86400);
#         dur = dur - (dys * 86400);
#       }
#       if (dur > 3599) {
#         hrs = trunc(dur / 3600);
#         dur = dur - (hrs * 3600);
#       }
#       if (dur > 59) {
#         mnts = trunc(dur / 60);
#         dur = dur - (mnts * 60);
#       }
#       char buffer[17];
#       sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
#       return {buffer};
#     icon: mdi:clock-start
#     update_interval: 5min